name: Build iOS Apps

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  build-ios:
    runs-on: macos-latest
    
    strategy:
      matrix:
        app: [cards, radio, timer, type, yes-no]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Build web app
      run: pnpm nx build ${{ matrix.app }}
      env:
        NODE_ENV: production

    - name: Setup iOS certificates (if available)
      if: env.IOS_CERTIFICATE_BASE64 != '' && env.IOS_PROVISIONING_PROFILE_BASE64 != ''
      run: |
        # Create certificate directory
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

        # Decode and install certificate
        echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
        
        # Create keychain
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Import certificate
        security import certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/xcodebuild
        security set-key-partition-list -S apple-tool:,apple: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain

        # Install provisioning profile
        echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > profile.mobileprovision
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}

    - name: Sync Capacitor
      run: |
        cd apps/${{ matrix.app }}
        pnpm run cap:sync

    - name: Verify iOS workspace exists
      run: |
        cd apps/${{ matrix.app }}
        if [ ! -d "ios" ]; then
          echo "iOS directory missing, running cap add ios"
          pnpm exec cap add ios
        fi
        if [ ! -f "ios/App/App.xcworkspace" ]; then
          echo "Workspace missing, running cap sync again"
          pnpm run cap:sync
        fi
        ls -la ios/App/

    - name: Build iOS app (unsigned)
      if: env.IOS_CERTIFICATE_BASE64 == '' || env.IOS_PROVISIONING_PROFILE_BASE64 == ''
      run: |
        cd apps/${{ matrix.app }}/ios/App
        xcodebuild -workspace App.xcworkspace -scheme App -configuration Release -destination generic/platform=iOS build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}

    - name: Build iOS app (signed)
      if: env.IOS_CERTIFICATE_BASE64 != '' && env.IOS_PROVISIONING_PROFILE_BASE64 != ''
      run: |
        cd apps/${{ matrix.app }}/ios/App
        xcodebuild -workspace App.xcworkspace -scheme App -configuration Release -destination generic/platform=iOS -archivePath App.xcarchive archive
        xcodebuild -exportArchive -archivePath App.xcarchive -exportPath export -exportOptionsPlist ../../../export-options.plist
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}

    - name: Upload unsigned build artifacts
      if: env.IOS_CERTIFICATE_BASE64 == '' || env.IOS_PROVISIONING_PROFILE_BASE64 == ''
      uses: actions/upload-artifact@v4
      with:
        name: ios-${{ matrix.app }}-build-unsigned
        path: apps/${{ matrix.app }}/ios/build/
        retention-days: 30
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}

    - name: Upload signed build artifacts
      if: env.IOS_CERTIFICATE_BASE64 != '' && env.IOS_PROVISIONING_PROFILE_BASE64 != ''
      uses: actions/upload-artifact@v4
      with:
        name: ios-${{ matrix.app }}-build-signed
        path: apps/${{ matrix.app }}/ios/export/
        retention-days: 30
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}

    - name: iOS build status
      run: |
        if [ -z "${{ secrets.IOS_CERTIFICATE_BASE64 }}" ] || [ -z "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" ]; then
          echo "✅ Built unsigned iOS app for ${{ matrix.app }}"
          echo "⚠️  To enable signed builds for App Store distribution, add these GitHub Secrets:"
          echo "   - IOS_CERTIFICATE_BASE64 (base64 encoded .p12 file)"
          echo "   - IOS_CERTIFICATE_PASSWORD (password for .p12 file)"
          echo "   - IOS_PROVISIONING_PROFILE_BASE64 (base64 encoded .mobileprovision file)"
          echo "   - KEYCHAIN_PASSWORD (temporary keychain password)"
        else
          echo "✅ Built signed iOS app for ${{ matrix.app }} ready for App Store"
        fi